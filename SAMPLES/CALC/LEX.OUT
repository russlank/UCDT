REGULAR EXPRESIONS:

> DIGIT=['0'..'9']
> NUMBER=(['0'..'9'])+ (['.'] (['0'..'9'])+)?
> BLANK=([''..' '])+


ALPHABET-SYMBOLS:

   1 : ['0'..'9']
   9 : ['.']
   8 : [''..' ']
   2 : ['+']
   3 : ['-']
   4 : ['*']
   5 : ['/']
   6 : ['(']
   7 : [')']


PROCEDURES:

> var
     Value: Real;
     Code: Integer;
begin
     {YACC_Number}
     with TTokenAttributes(AInfo)
     do begin
        Token := YACC_Number;
        LexemeLen := ALex^.GetMatchedLexeme(Lexeme, MAXLEXEMESTRLENGTH);
        Lexeme[LexemeLen] := #0;
        Val( Lexeme, Value, Code)
        end;
end;
> 
begin
     {YACC_Plus}
     TTokenAttributes(AInfo).Token := YACC_Plus;
end;
> 
begin
     {YACC_Minus}
     TTokenAttributes(AInfo).Token := YACC_Minus;
end;
> 
begin
     {YACC_Mul}
     TTokenAttributes(AInfo).Token := YACC_Mul;
end;
> 
begin
     {YACC_Div}
     TTokenAttributes(AInfo).Token := YACC_Div;
end;
> 
begin
     {YACC_LB}
     TTokenAttributes(AInfo).Token := YACC_LB;
end;
> 
begin
     {YACC_RB}
     TTokenAttributes(AInfo).Token := YACC_RB;
end;
> 
begin
     {BLANK}
     AReturn := False;
end;


THE DFA:

Start state :1
STATE.1
   --['0'..'9']-->2
   --['+']-->3
   --['-']-->4
   --['*']-->5
   --['/']-->6
   --['(']-->7
   --[')']-->8
   --[''..' ']-->9

STATE.2 * var
     Value: Real;
     Code: Integer;
begin
     {YACC_Number}
     with TTokenAttributes(AInfo)
     do begin
        Token := YACC_Number;
        LexemeLen := ALex^.GetMatchedLexeme(Lexeme, MAXLEXEMESTRLENGTH);
        Lexeme[LexemeLen] := #0;
        Val( Lexeme, Value, Code)
        end;
end;

   --['0'..'9']-->2
   --['.']-->10

STATE.3 * 
begin
     {YACC_Plus}
     TTokenAttributes(AInfo).Token := YACC_Plus;
end;


STATE.4 * 
begin
     {YACC_Minus}
     TTokenAttributes(AInfo).Token := YACC_Minus;
end;


STATE.5 * 
begin
     {YACC_Mul}
     TTokenAttributes(AInfo).Token := YACC_Mul;
end;


STATE.6 * 
begin
     {YACC_Div}
     TTokenAttributes(AInfo).Token := YACC_Div;
end;


STATE.7 * 
begin
     {YACC_LB}
     TTokenAttributes(AInfo).Token := YACC_LB;
end;


STATE.8 * 
begin
     {YACC_RB}
     TTokenAttributes(AInfo).Token := YACC_RB;
end;


STATE.9 * 
begin
     {BLANK}
     AReturn := False;
end;

   --[''..' ']-->9

STATE.10
   --['0'..'9']-->11

STATE.11 * var
     Value: Real;
     Code: Integer;
begin
     {YACC_Number}
     with TTokenAttributes(AInfo)
     do begin
        Token := YACC_Number;
        LexemeLen := ALex^.GetMatchedLexeme(Lexeme, MAXLEXEMESTRLENGTH);
        Lexeme[LexemeLen] := #0;
        Val( Lexeme, Value, Code)
        end;
end;

   --['0'..'9']-->11


THE DFA TRANSITION TABLE:


   1:    2    3    4    5    6    7    8    9 ----       
   2:    2 ---- ---- ---- ---- ---- ---- ----   10       var
     Value: Real;
     Code: Integer;
begin
     {YACC_Number}
     with TTokenAttributes(AInfo)
     do begin
        Token := YACC_Number;
        LexemeLen := ALex^.GetMatchedLexeme(Lexeme, MAXLEXEMESTRLENGTH);
        Lexeme[LexemeLen] := #0;
        Val( Lexeme, Value, Code)
        end;
end;

   3: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_Plus}
     TTokenAttributes(AInfo).Token := YACC_Plus;
end;

   4: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_Minus}
     TTokenAttributes(AInfo).Token := YACC_Minus;
end;

   5: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_Mul}
     TTokenAttributes(AInfo).Token := YACC_Mul;
end;

   6: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_Div}
     TTokenAttributes(AInfo).Token := YACC_Div;
end;

   7: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_LB}
     TTokenAttributes(AInfo).Token := YACC_LB;
end;

   8: ---- ---- ---- ---- ---- ---- ---- ---- ----       
begin
     {YACC_RB}
     TTokenAttributes(AInfo).Token := YACC_RB;
end;

   9: ---- ---- ---- ---- ---- ---- ----    9 ----       
begin
     {BLANK}
     AReturn := False;
end;

  10:   11 ---- ---- ---- ---- ---- ---- ---- ----       
  11:   11 ---- ---- ---- ---- ---- ---- ---- ----       var
     Value: Real;
     Code: Integer;
begin
     {YACC_Number}
     with TTokenAttributes(AInfo)
     do begin
        Token := YACC_Number;
        LexemeLen := ALex^.GetMatchedLexeme(Lexeme, MAXLEXEMESTRLENGTH);
        Lexeme[LexemeLen] := #0;
        Val( Lexeme, Value, Code)
        end;
end;


   0 : ----
   1 :    8
   2 :    8
   3 :    8
   4 :    8
   5 :    8
   6 :    8
   7 :    8
   8 :    8
   9 :    8
  10 :    8
  11 :    8
  12 :    8
  13 :    8
  14 :    8
  15 :    8
  16 :    8
  17 :    8
  18 :    8
  19 :    8
  20 :    8
  21 :    8
  22 :    8
  23 :    8
  24 :    8
  25 :    8
  26 :    8
  27 :    8
  28 :    8
  29 :    8
  30 :    8
  31 :    8
  32 :    8  ~ ~
  33 : ----  ~!~
  34 : ----  ~"~
  35 : ----  ~#~
  36 : ----  ~$~
  37 : ----  ~%~
  38 : ----  ~&~
  39 : ----  ~'~
  40 :    6  ~(~
  41 :    7  ~)~
  42 :    4  ~*~
  43 :    2  ~+~
  44 : ----  ~,~
  45 :    3  ~-~
  46 :    9  ~.~
  47 :    5  ~/~
  48 :    1  ~0~
  49 :    1  ~1~
  50 :    1  ~2~
  51 :    1  ~3~
  52 :    1  ~4~
  53 :    1  ~5~
  54 :    1  ~6~
  55 :    1  ~7~
  56 :    1  ~8~
  57 :    1  ~9~
  58 : ----  ~:~
  59 : ----  ~;~
  60 : ----  ~<~
  61 : ----  ~=~
  62 : ----  ~>~
  63 : ----  ~?~
  64 : ----  ~@~
  65 : ----  ~A~
  66 : ----  ~B~
  67 : ----  ~C~
  68 : ----  ~D~
  69 : ----  ~E~
  70 : ----  ~F~
  71 : ----  ~G~
  72 : ----  ~H~
  73 : ----  ~I~
  74 : ----  ~J~
  75 : ----  ~K~
  76 : ----  ~L~
  77 : ----  ~M~
  78 : ----  ~N~
  79 : ----  ~O~
  80 : ----  ~P~
  81 : ----  ~Q~
  82 : ----  ~R~
  83 : ----  ~S~
  84 : ----  ~T~
  85 : ----  ~U~
  86 : ----  ~V~
  87 : ----  ~W~
  88 : ----  ~X~
  89 : ----  ~Y~
  90 : ----  ~Z~
  91 : ----  ~[~
  92 : ----  ~\~
  93 : ----  ~]~
  94 : ----  ~^~
  95 : ----  ~_~
  96 : ----  ~`~
  97 : ----  ~a~
  98 : ----  ~b~
  99 : ----  ~c~
 100 : ----  ~d~
 101 : ----  ~e~
 102 : ----  ~f~
 103 : ----  ~g~
 104 : ----  ~h~
 105 : ----  ~i~
 106 : ----  ~j~
 107 : ----  ~k~
 108 : ----  ~l~
 109 : ----  ~m~
 110 : ----  ~n~
 111 : ----  ~o~
 112 : ----  ~p~
 113 : ----  ~q~
 114 : ----  ~r~
 115 : ----  ~s~
 116 : ----  ~t~
 117 : ----  ~u~
 118 : ----  ~v~
 119 : ----  ~w~
 120 : ----  ~x~
 121 : ----  ~y~
 122 : ----  ~z~
 123 : ----  ~{~
 124 : ----  ~|~
 125 : ----  ~}~
 126 : ----  ~~~
 127 : ----  ~~
 128 : ----  ~Ä~
 129 : ----  ~Å~
 130 : ----  ~Ç~
 131 : ----  ~É~
 132 : ----  ~Ñ~
 133 : ----  ~Ö~
 134 : ----  ~Ü~
 135 : ----  ~á~
 136 : ----  ~à~
 137 : ----  ~â~
 138 : ----  ~ä~
 139 : ----  ~ã~
 140 : ----  ~å~
 141 : ----  ~ç~
 142 : ----  ~é~
 143 : ----  ~è~
 144 : ----  ~ê~
 145 : ----  ~ë~
 146 : ----  ~í~
 147 : ----  ~ì~
 148 : ----  ~î~
 149 : ----  ~ï~
 150 : ----  ~ñ~
 151 : ----  ~ó~
 152 : ----  ~ò~
 153 : ----  ~ô~
 154 : ----  ~ö~
 155 : ----  ~õ~
 156 : ----  ~ú~
 157 : ----  ~ù~
 158 : ----  ~û~
 159 : ----  ~ü~
 160 : ----  ~†~
 161 : ----  ~°~
 162 : ----  ~¢~
 163 : ----  ~£~
 164 : ----  ~§~
 165 : ----  ~•~
 166 : ----  ~¶~
 167 : ----  ~ß~
 168 : ----  ~®~
 169 : ----  ~©~
 170 : ----  ~™~
 171 : ----  ~´~
 172 : ----  ~¨~
 173 : ----  ~≠~
 174 : ----  ~Æ~
 175 : ----  ~Ø~
 176 : ----  ~∞~
 177 : ----  ~±~
 178 : ----  ~≤~
 179 : ----  ~≥~
 180 : ----  ~¥~
 181 : ----  ~µ~
 182 : ----  ~∂~
 183 : ----  ~∑~
 184 : ----  ~∏~
 185 : ----  ~π~
 186 : ----  ~∫~
 187 : ----  ~ª~
 188 : ----  ~º~
 189 : ----  ~Ω~
 190 : ----  ~æ~
 191 : ----  ~ø~
 192 : ----  ~¿~
 193 : ----  ~¡~
 194 : ----  ~¬~
 195 : ----  ~√~
 196 : ----  ~ƒ~
 197 : ----  ~≈~
 198 : ----  ~∆~
 199 : ----  ~«~
 200 : ----  ~»~
 201 : ----  ~…~
 202 : ----  ~ ~
 203 : ----  ~À~
 204 : ----  ~Ã~
 205 : ----  ~Õ~
 206 : ----  ~Œ~
 207 : ----  ~œ~
 208 : ----  ~–~
 209 : ----  ~—~
 210 : ----  ~“~
 211 : ----  ~”~
 212 : ----  ~‘~
 213 : ----  ~’~
 214 : ----  ~÷~
 215 : ----  ~◊~
 216 : ----  ~ÿ~
 217 : ----  ~Ÿ~
 218 : ----  ~⁄~
 219 : ----  ~€~
 220 : ----  ~‹~
 221 : ----  ~›~
 222 : ----  ~ﬁ~
 223 : ----  ~ﬂ~
 224 : ----  ~‡~
 225 : ----  ~·~
 226 : ----  ~‚~
 227 : ----  ~„~
 228 : ----  ~‰~
 229 : ----  ~Â~
 230 : ----  ~Ê~
 231 : ----  ~Á~
 232 : ----  ~Ë~
 233 : ----  ~È~
 234 : ----  ~Í~
 235 : ----  ~Î~
 236 : ----  ~Ï~
 237 : ----  ~Ì~
 238 : ----  ~Ó~
 239 : ----  ~Ô~
 240 : ----  ~~
 241 : ----  ~Ò~
 242 : ----  ~Ú~
 243 : ----  ~Û~
 244 : ----  ~Ù~
 245 : ----  ~ı~
 246 : ----  ~ˆ~
 247 : ----  ~˜~
 248 : ----  ~¯~
 249 : ----  ~˘~
 250 : ----  ~˙~
 251 : ----  ~˚~
 252 : ----  ~¸~
 253 : ----  ~˝~
 254 : ----  ~˛~
 255 : ----  ~ˇ~

START STATE     = 1
STATES COUNT    = 11
ALPHABET SIZE   = 9




